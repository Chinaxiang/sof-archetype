#set( $symbol_pound = '#' )
#set( $symbol_dollar = '$' )
#set( $symbol_escape = '\' )
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="${package}.dal.dao.DemoMapper">
  <resultMap id="BaseResultMap" type="${package}.dal.entity.Demo">
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="name" jdbcType="VARCHAR" property="name" />
    <result column="age" jdbcType="INTEGER" property="age" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${symbol_dollar}{criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${symbol_dollar}{criterion.condition} ${symbol_pound}{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${symbol_dollar}{criterion.condition} ${symbol_pound}{criterion.value} and ${symbol_pound}{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${symbol_dollar}{criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    ${symbol_pound}{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${symbol_dollar}{criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${symbol_dollar}{criterion.condition} ${symbol_pound}{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${symbol_dollar}{criterion.condition} ${symbol_pound}{criterion.value} and ${symbol_pound}{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${symbol_dollar}{criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    ${symbol_pound}{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, `name`, age, create_time, update_time
  </sql>
  <select id="selectByExample" parameterType="${package}.dal.entity.DemoExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from t_demo
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${symbol_dollar}{orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from t_demo
    where id = ${symbol_pound}{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from t_demo
    where id = ${symbol_pound}{id,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="${package}.dal.entity.DemoExample">
    delete from t_demo
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="${package}.dal.entity.Demo">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Long">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into t_demo (`name`, age, create_time, 
      update_time)
    values (${symbol_pound}{name,jdbcType=VARCHAR}, ${symbol_pound}{age,jdbcType=INTEGER}, ${symbol_pound}{createTime,jdbcType=TIMESTAMP}, 
      ${symbol_pound}{updateTime,jdbcType=TIMESTAMP})
  </insert>
  <insert id="insertSelective" parameterType="${package}.dal.entity.Demo">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Long">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into t_demo
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="name != null">
        `name`,
      </if>
      <if test="age != null">
        age,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="updateTime != null">
        update_time,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="name != null">
        ${symbol_pound}{name,jdbcType=VARCHAR},
      </if>
      <if test="age != null">
        ${symbol_pound}{age,jdbcType=INTEGER},
      </if>
      <if test="createTime != null">
        ${symbol_pound}{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        ${symbol_pound}{updateTime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="${package}.dal.entity.DemoExample" resultType="java.lang.Long">
    select count(*) from t_demo
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update t_demo
    <set>
      <if test="record.id != null">
        id = ${symbol_pound}{record.id,jdbcType=BIGINT},
      </if>
      <if test="record.name != null">
        `name` = ${symbol_pound}{record.name,jdbcType=VARCHAR},
      </if>
      <if test="record.age != null">
        age = ${symbol_pound}{record.age,jdbcType=INTEGER},
      </if>
      <if test="record.createTime != null">
        create_time = ${symbol_pound}{record.createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.updateTime != null">
        update_time = ${symbol_pound}{record.updateTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update t_demo
    set id = ${symbol_pound}{record.id,jdbcType=BIGINT},
      `name` = ${symbol_pound}{record.name,jdbcType=VARCHAR},
      age = ${symbol_pound}{record.age,jdbcType=INTEGER},
      create_time = ${symbol_pound}{record.createTime,jdbcType=TIMESTAMP},
      update_time = ${symbol_pound}{record.updateTime,jdbcType=TIMESTAMP}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="${package}.dal.entity.Demo">
    update t_demo
    <set>
      <if test="name != null">
        `name` = ${symbol_pound}{name,jdbcType=VARCHAR},
      </if>
      <if test="age != null">
        age = ${symbol_pound}{age,jdbcType=INTEGER},
      </if>
      <if test="createTime != null">
        create_time = ${symbol_pound}{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        update_time = ${symbol_pound}{updateTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = ${symbol_pound}{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="${package}.dal.entity.Demo">
    update t_demo
    set `name` = ${symbol_pound}{name,jdbcType=VARCHAR},
      age = ${symbol_pound}{age,jdbcType=INTEGER},
      create_time = ${symbol_pound}{createTime,jdbcType=TIMESTAMP},
      update_time = ${symbol_pound}{updateTime,jdbcType=TIMESTAMP}
    where id = ${symbol_pound}{id,jdbcType=BIGINT}
  </update>
</mapper>